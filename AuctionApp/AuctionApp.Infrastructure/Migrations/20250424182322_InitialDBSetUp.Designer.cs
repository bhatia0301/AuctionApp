// <auto-generated />
using System;
using AuctionApp.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuctionApp.Infrastructure.Migrations
{
    [DbContext(typeof(AuctionDbContext))]
    [Migration("20250424182322_InitialDBSetUp")]
    partial class InitialDBSetUp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuctionApp.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "41377029-b399-409c-8da2-7a4bcf802978",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "242b9571-6f4b-4cff-a10b-bbc9cd335f2d",
                            Email = "admin01@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            IsBanned = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN01@GMAIL.COM",
                            NormalizedUserName = "ADMIN01@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFY0rO92Y0MrcP7hgbO5XEpw5u1iSqXV/bSaKLVm/JkVkh9Geqa28hQW+xw8Axy0Sw==",
                            PhoneNumber = "9851234567",
                            PhoneNumberConfirmed = false,
                            Role = "Admin",
                            SecurityStamp = "41377029-b399-409c-8da2-7a4bcf802978",
                            TwoFactorEnabled = false,
                            UserName = "admin01@gmail.com"
                        },
                        new
                        {
                            Id = "9c8c7ba1-9f91-4ee4-8d47-fac0125dc74c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b18b4165-ab04-4680-9d4f-8db1705d4e52",
                            Email = "admin02@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            IsBanned = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN02@GMAIL.COM",
                            NormalizedUserName = "ADMIN02@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOtFBC4nwFmKcZWpheK/E57xOUi8ihvblksx6bP0q+rMMFPIy9KUv/pLoGkx0f/iKw==",
                            PhoneNumber = "9851232351",
                            PhoneNumberConfirmed = false,
                            Role = "Admin",
                            SecurityStamp = "9c8c7ba1-9f91-4ee4-8d47-fac0125dc74c",
                            TwoFactorEnabled = false,
                            UserName = "admin02@gmail.com"
                        },
                        new
                        {
                            Id = "ad014415-a368-4a32-9351-a8abf2485393",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ade9fbc-e6ba-4a77-be16-3d7356204c6e",
                            Email = "nitin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nitin Kumar",
                            IsBanned = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NITIN@GMAIL.COM",
                            NormalizedUserName = "NITIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH1Dl2R2UyD51C+gYrt4I5b+bpmDBYS0pIlp2nTphzPDFZg6YQAxdStxAha0ofYCgQ==",
                            PhoneNumber = "8851114567",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "ad014415-a368-4a32-9351-a8abf2485393",
                            TwoFactorEnabled = false,
                            UserName = "nitin@gmail.com"
                        },
                        new
                        {
                            Id = "6e3fccd2-60fb-4090-b281-33f0405d6a45",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa9e922a-7811-4c6b-95f8-e1d176a1dafe",
                            Email = "rohit@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rohit Sharma",
                            IsBanned = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROHIT@GMAIL.COM",
                            NormalizedUserName = "ROHIT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN3mQPs3TFY1SU/DkdeeJYUbrZIRqDTvcpMDaTSYXvvxrRxL0sOB7hWRPNrznfC2Fg==",
                            PhoneNumber = "7853454569",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "6e3fccd2-60fb-4090-b281-33f0405d6a45",
                            TwoFactorEnabled = false,
                            UserName = "rohit@gmail.com"
                        },
                        new
                        {
                            Id = "9bba7a43-19df-46d5-97ad-b1cf29053c02",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0509b5fb-b87b-4670-8c9a-9ac90ade760c",
                            Email = "rahul@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rahul Tiwari",
                            IsBanned = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RAHUL@GMAIL.COM",
                            NormalizedUserName = "RAHUL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPaW2YH3GZzJRRfb1QLYiaFL7gDLu6DaHLQfmaFXNj3TNt8PM3X9SLgeCBdgcyGXkg==",
                            PhoneNumber = "9921184560",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "9bba7a43-19df-46d5-97ad-b1cf29053c02",
                            TwoFactorEnabled = false,
                            UserName = "rahul@gmail.com"
                        },
                        new
                        {
                            Id = "279e30e5-426d-449e-86c8-c2a89ffc1ada",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "094bfe96-4011-4b64-828a-1b8dab47b65f",
                            Email = "ishita@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ishita Roy",
                            IsBanned = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ISHITA@GMAIL.COM",
                            NormalizedUserName = "ISHITA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN2ekXXkVMbbS4TzFVPb4DNwc7uwx/oC4S+bbRoeogMsk6wEbpvmG2ANG1gQdgqo5g==",
                            PhoneNumber = "6851114378",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "279e30e5-426d-449e-86c8-c2a89ffc1ada",
                            TwoFactorEnabled = false,
                            UserName = "ishita@gmail.com"
                        },
                        new
                        {
                            Id = "4732b433-fd9c-48d3-8cb3-eccee797cb0d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b191400a-dc90-45ee-8b94-7caf5dd77731",
                            Email = "khushi@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Khushi Seth",
                            IsBanned = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KHUSHI@GMAIL.COM",
                            NormalizedUserName = "KHUSHI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECIT0SeV1XKaWTB6PZP535L4SODC/+CGGmLMsIT8KgaFSXTB80buawYAJ++C5dTXxw==",
                            PhoneNumber = "7920012980",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "4732b433-fd9c-48d3-8cb3-eccee797cb0d",
                            TwoFactorEnabled = false,
                            UserName = "khushi@gmail.com"
                        },
                        new
                        {
                            Id = "77311c10-f548-4e65-8bd5-5df2dd774c1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10722e5c-5d95-4134-88eb-d5e0e2c49ef2",
                            Email = "abhi@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Abhi Verma",
                            IsBanned = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ABHI@GMAIL.COM",
                            NormalizedUserName = "ABHI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFKp6S8ge97tem7QUYfAkSEW2wtsmRACHVO84bDbtWdlnqjY2uAimbch5OaNnxTRGA==",
                            PhoneNumber = "6642714567",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "77311c10-f548-4e65-8bd5-5df2dd774c1c",
                            TwoFactorEnabled = false,
                            UserName = "abhi@gmail.com"
                        });
                });

            modelBuilder.Entity("AuctionApp.Domain.Models.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BidCount")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentHighestBid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighestBidUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HighestBidUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("AuctionApp.Domain.Models.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<decimal>("BidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("AuctionApp.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AuctionApp.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionDuration")
                        .HasColumnType("int");

                    b.Property<string>("BoughtByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReservedPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StartingPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ac5e271a-005b-4ec8-8bdd-86571bdcdb1a",
                            ConcurrencyStamp = "ac5e271a-005b-4ec8-8bdd-86571bdcdb1a",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "5ad93cd7-35e6-4fc7-9690-714f86ec8ef2",
                            ConcurrencyStamp = "5ad93cd7-35e6-4fc7-9690-714f86ec8ef2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "41377029-b399-409c-8da2-7a4bcf802978",
                            RoleId = "5ad93cd7-35e6-4fc7-9690-714f86ec8ef2"
                        },
                        new
                        {
                            UserId = "9c8c7ba1-9f91-4ee4-8d47-fac0125dc74c",
                            RoleId = "5ad93cd7-35e6-4fc7-9690-714f86ec8ef2"
                        },
                        new
                        {
                            UserId = "ad014415-a368-4a32-9351-a8abf2485393",
                            RoleId = "ac5e271a-005b-4ec8-8bdd-86571bdcdb1a"
                        },
                        new
                        {
                            UserId = "6e3fccd2-60fb-4090-b281-33f0405d6a45",
                            RoleId = "ac5e271a-005b-4ec8-8bdd-86571bdcdb1a"
                        },
                        new
                        {
                            UserId = "9bba7a43-19df-46d5-97ad-b1cf29053c02",
                            RoleId = "ac5e271a-005b-4ec8-8bdd-86571bdcdb1a"
                        },
                        new
                        {
                            UserId = "279e30e5-426d-449e-86c8-c2a89ffc1ada",
                            RoleId = "ac5e271a-005b-4ec8-8bdd-86571bdcdb1a"
                        },
                        new
                        {
                            UserId = "4732b433-fd9c-48d3-8cb3-eccee797cb0d",
                            RoleId = "ac5e271a-005b-4ec8-8bdd-86571bdcdb1a"
                        },
                        new
                        {
                            UserId = "77311c10-f548-4e65-8bd5-5df2dd774c1c",
                            RoleId = "ac5e271a-005b-4ec8-8bdd-86571bdcdb1a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuctionApp.Domain.Models.Auction", b =>
                {
                    b.HasOne("AuctionApp.Domain.Models.ApplicationUser", "HighestBidUser")
                        .WithMany()
                        .HasForeignKey("HighestBidUserId");

                    b.HasOne("AuctionApp.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HighestBidUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AuctionApp.Domain.Models.Bid", b =>
                {
                    b.HasOne("AuctionApp.Domain.Models.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionApp.Domain.Models.ApplicationUser", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuctionApp.Domain.Models.Product", b =>
                {
                    b.HasOne("AuctionApp.Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionApp.Domain.Models.ApplicationUser", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AuctionApp.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AuctionApp.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionApp.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AuctionApp.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuctionApp.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("AuctionApp.Domain.Models.Auction", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("AuctionApp.Domain.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
